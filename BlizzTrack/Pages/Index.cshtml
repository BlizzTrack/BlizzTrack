@page
@model BlizzTrack.Pages.IndexModel

@using static Core.Extensions.ListExtensions

@{
    ViewData["Title"] = "All Games";
    ViewData["Description"] = "A powerful website which lets you view the versions of all the games that Blizzard Entertainment has on Battle.net!";
}

<div class="row">
<div class="col-12" aria-label="breadcrumb col-12" role="navigation">
    <ol class="breadcrumb">
        <li class="breadcrumb-item active">All Games</li>
        @if (!string.IsNullOrEmpty(Model.Search))
        {
            <li class="breadcrumb-item">
                <a asp-page="/Index"><i class="fa fa-search mr-1"></i> Reset Search</a>
            </li>
        }
    </ol>
</div>

@if (!string.IsNullOrEmpty(Model.Search))
{
    <div class="col-12">
        <div class="card">
            <div class="card-header  p-2">
                <div class="col-sm-12 text-left">
                    <h2 class="card-title">Games matching your search</h2>
                    <div class="card-category">Search Results in latest manifest</div>
                </div>
            </div>
            <div class="card-body pt-0 px-0 pb-0">
                @foreach (var (product, seqn, flags) in 
                    Model.Manifests.First().Content
                        .Where(x => x.GetName().Contains(Model.Search, StringComparison.OrdinalIgnoreCase) || x.Product.Contains(Model.Search, StringComparison.OrdinalIgnoreCase)).OrderByAlphaNumeric(x => x.Product))
                {
                    switch (flags)
                    {
                        case "cdn":
                            continue;
                        // Skip empty BGDL
                        case "bgdl":
                        {
                            var ver = Model.BgdLs.FirstOrDefault(x => x.Code == product);
                            if (ver?.Content?.Length <= 0)
                            {
                                continue;
                            }
                            break;
                        }
                    }

                    var config = Model.Configs.FirstOrDefault(x => x.Code == product) ?? new Core.Models.GameConfig
                    {
                        Config = new Core.Models.ConfigItems(true, string.Empty),
                        Code = product
                    };
                    
                    <div class="game-item-link p-2 px-3">
                        <a class="d-flex" asp-page="/ViewGameManifest" asp-route-code="@(config.Owner == null ? product : config.Owner.Slug)" asp-route-file="@(string.IsNullOrEmpty(flags) ? "versions" : flags)" asp-route-latest-seqn="@seqn">
                            <div class="flex-fill">
                                <h3 class="mt-0 mb-1">@config.GetName()</h3>
                                <ol class="breadcrumb p-0 m-0 bg-transparent">
                                    <li class="breadcrumb-item active">
                                        <i class="fa fa-@(config.Config.Encrypted ? "lock" : "lock-open")"></i>
                                    </li>
                                    <li class="breadcrumb-item active">
                                        @product
                                    </li>
                                    <li class="breadcrumb-item active">
                                        @flags
                                    </li>
                                    <li class="breadcrumb-item active">

                                        @switch (flags)
                                        {
                                            case "versions":
                                            {
                                                var ver = Model.Versions.FirstOrDefault(x => x.Code == product);
                                                if (ver == null)
                                                {
                                                    @("N/A")
                                                } else if (product == "catalogs")
                                                {
                                                    @ver.Content.Last().Versionsname
                                                }
                                                else if (product == "bts")
                                                {
                                                    @("N/A")
                                                }
                                                else if (ver.Content != null)
                                                {
                                                    var verF = ver.Content.FirstOrDefault(x => x.Region == "us");
                                                    if (verF == null)
                                                    {
                                                        @("N/A")
                                                    }
                                                    else
                                                    {
                                                        @verF.Versionsname
                                                    }
                                                }
                                                else
                                                {
                                                    @("N/A")
                                                }
                                                break;
                                            }
                                            case "bgdl":
                                            {
                                                var ver = Model.BgdLs.FirstOrDefault(x => x.Code == product);

                                                if (ver == null)
                                                {
                                                    @("N/A")
                                                }
                                                else if (product == "catalogs")
                                                {
                                                    @ver.Content.Last().Versionsname
                                                }
                                                else if (product == "bts")
                                                {
                                                    @("N/A")
                                                }
                                                else if (ver.Content != null)
                                                {
                                                    var verF = ver.Content.FirstOrDefault(x => x.Region == "us");
                                                    if (verF == null)
                                                    {
                                                        @("N/A")
                                                    }
                                                    else
                                                    {
                                                        @verF.Versionsname
                                                    }
                                                }
                                                else
                                                {
                                                    @("N/A")
                                                }
                                                break;
                                            }
                                        }
                                    </li>
                                    <li class="breadcrumb-item active">
                                        <time>
                                            @Model.GameVersions.FirstOrDefault(x => x.Code == product && x.Type == flags)?.Updated.ToString("MMMM dd, yyyy hh:mm tt")
                                        </time>
                                    </li>
                                </ol>
                            </div>
                            <div class="d-flex font-weight-bolder arrow">
                                >
                            </div>
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
}

@if (Model.SummaryDiff.OrderByAlphaNumeric(x => x.newest.Product).Any())
{
    <div class="col-12">
        <div class="card ">
            <div class="card-header">
                <div class="col-sm-12  p-2 text-left">
                    <h2 class="card-title">Recently Updated Games</h2>
                    <div class="card-category">Recent Updates @Model.Manifests.First().Seqn &#x2B05; @Model.Manifests.Last().Seqn</div>
                </div>
            </div>
            <div class="card-body pt-0 px-0 pb-0">
                @foreach (var ((product, seqn, flags), _) in Model.SummaryDiff.OrderByAlphaNumeric(x => x.newest.Product))
                {
                    switch (flags)
                    {
                        case "cdn":
                            continue;
                        // Skip empty BGDL
                    }

                    var config = Model.Configs.FirstOrDefault(x => x.Code == product) ?? new Core.Models.GameConfig
                    {
                        Config = new Core.Models.ConfigItems(true, string.Empty),
                        Code = product
                    };

                    var child = Model.GameChildrenList.FirstOrDefault(x => x.Code == product);

                    <div class="game-item-link p-2 px-3">
                        <a class="d-flex" asp-page="/ViewGameManifest" asp-route-code="@(config.Owner == null ? product : config.Owner.Slug)" asp-route-file="@(string.IsNullOrEmpty(flags) ? "versions" : flags)" asp-route-latest-seqn="@seqn">
                            <div class="flex-fill">
                                <h3 class="mt-0 mb-1">@(child?.Name ?? config.GetName())</h3>
                                <ol class="breadcrumb p-0 m-0 bg-transparent">
                                    <li class="breadcrumb-item active">
                                        <i class="fa fa-@(config.Config.Encrypted ? "lock" : "lock-open")"></i>
                                    </li>
                                    <li class="breadcrumb-item active">
                                        @product
                                    </li>
                                    <li class="breadcrumb-item active">
                                        @flags
                                    </li>
                                    <li class="breadcrumb-item active">
                                        @if (flags == "versions")
                                        {
                                            var ver = Model.Versions.FirstOrDefault(x => x.Code == product);

                                            if (ver == null)
                                            {
                                                @("N/A")
                                            }
                                            else if (product == "catalogs")
                                            {
                                                @(ver.Content.Last().Versionsname)
                                            }
                                            else if (product == "bts")
                                            {
                                                @("N/A")
                                            }
                                            else
                                            {
                                                var verF = ver.Content.FirstOrDefault(x => x.Region == "us");
                                                if (verF == null)
                                                {
                                                    @("N/A")
                                                }
                                                else
                                                {
                                                    @(verF.Versionsname)
                                                }
                                            }
                                        }
                                        else if (flags == "bgdl")
                                        {
                                            var ver = Model.BgdLs.FirstOrDefault(x => x.Code == product);

                                            if (ver == null)
                                            {
                                                @("N/A")
                                            }
                                            else if (product == "catalogs")
                                            {
                                                @(ver.Content.Last().Versionsname)
                                            }
                                            else if (product == "bts")
                                            {
                                                @("N/A")
                                            }
                                            else
                                            {
                                                var verF = ver.Content.FirstOrDefault(x => x.Region == "us");
                                                if (verF == null)
                                                {
                                                    @("N/A")
                                                }
                                                else
                                                {
                                                    @(verF.Versionsname)
                                                }
                                            }
                                        }
                                    </li>
                                    <li class="breadcrumb-item active">
                                        <time>
                                            @Model.GameVersions.FirstOrDefault(x => x.Code == product && x.Type == flags)?.Updated.ToString("MMMM dd, yyyy hh:mm tt")
                                        </time>
                                    </li>
                                </ol>
                            </div>
                            <div class="d-flex font-weight-bolder arrow">
                                >
                            </div>
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
}
@{
    var latestCodes = Model.Manifests.First().Content.ToList();
}

@foreach (var company in Model.Companies.Where(x => x.Parents.Count > 0))
{
    var parents = company.Parents.OrderBy(x => x.Code).ToList();
    
    // Storm as a CDN config even though it's deprecated in battle.net so we need to check it exist
    if (parents.Select(x => x.Children.ToList()).ToList().Exists(x => x.Exists(x => x.Code == "storm")))
    {
        continue;
    }

    if (parents.Count <= 0)
    {
        continue;
    }
    
    <div class="card bg-transparent mb-2 section-title" style="box-shadow: none;">
        <div class="card-header">
            <div class="col-sm-12 text-left">
                <h2 class="card-title">
                    @company.Name
                </h2>
            </div>
        </div>
    </div>
    

    @foreach (var parent in parents)
    {
        var parentCodes = parent.Children.Select(x => x.Code).ToList();
        var gameCodes = latestCodes.Where(x => parentCodes.Contains(x.Product)).ToArray();
        if (gameCodes.Length <= 0)
        {
            continue;
        }

        <div class="col-12">
            <div class="card">
                <div class="card-header border-0 p-2 d-flex align-items-center" id="@parent.Slug">
                    @if (parent.Logos?.Count > 0)
                    {
                        var logo = parent.Logos.FirstOrDefault(x => x.Type.Contains("svg"));
                        if (logo != null)
                        {
                            <img src="@logo.URL" class="mr-3" width="45" height="45" alt="@parent.Name Logo">
                        }
                        else
                        {
                            <img src="~/images/logos/bt.svg" class="mr-3" width="45" height="45" alt="@parent.Name Logo">
                        }
                    }
                    else
                    {
                        <img src="~/images/logos/bt.svg" class="mr-3" width="45" height="45" alt="@parent.Name Logo">
                    }
                    <div class="d-flex w-100">
                        <div class="d-block">
                            <h2 class="card-title mb-0 w-100">
                                @parent.Name
                                <small class="d-none d-lg-inline" style="font-size: x-small">
                                    <a href="#@parent.Slug" aria-label="@parent.Name">
                                        <i class="fas fa-anchor"></i>
                                    </a>
                                </small>
                            </h2>
                            @if (!string.IsNullOrEmpty(parent.About))
                            {
                                <h5 class="card-category mb-0 mt-1 text-white d-none d-lg-inline" style="filter: brightness(0.75)">@parent.About</h5>
                            }
                            
                        </div>
                        @if (!string.IsNullOrEmpty(parent.CxpProductId))
                        {
                            <div class="ml-auto p-0 d-none d-lg-inline w-auto">
                                <a class="btn btn-sm btn-dark" asp-page="/Blog/ViewGameBlog" asp-route-slug="@parent.Slug">
                                    <i class="fa fa-blog mr-1"></i> View Blog Feed
                                </a>
                            </div>
                        }
                    </div>
                </div>
                <feature name="@nameof(FeatureFlags.PatchNotes)">
                    @if (parent.PatchNoteAreas?.Count > 0)
                    {
                        <div class="card-body pt-0 pb-0 px-0">
                            <div class="d-none d-lg-block">
                                <div class="btn-group special no-radius w-100" role="group" aria-label="...">
                                    @foreach (var item in parent.PatchNoteAreas)
                                    {
                                        <a asp-page="/PatchNotes" asp-route-slug="@parent.Slug" asp-route-game_type="@item" class="btn btn-outline-default text-white m-0">
                                            @GameTypeFixer.Fix(item) Patch Notes
                                        </a>
                                    }
                                </div>
                            </div>
                            <div class="d-lg-none">
                                <div class="dropdown no-radius">
                                    <button class="btn btn-secondary dropdown-toggle w-100 " type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        Supported Patch Notes
                                    </button>
                                    <div class="dropdown-menu w-100" aria-labelledby="dropdownMenuButton">
                                        @foreach (var item in parent.PatchNoteAreas)
                                        {
                                            <a asp-page="/PatchNotes" asp-route-slug="@parent.Slug" asp-route-game_type="@item" class="dropdown-item">
                                                @GameTypeFixer.Fix(item) Patch Notes
                                            </a>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </feature>
                <div class="card-body pt-0 px-0 pb-0">
                    @foreach (var (product, seqn, flags) in gameCodes.OrderByAlphaNumeric(x => x.Product))
                    {
                        var child = parent.Children.FirstOrDefault(x => x.Code == product);
                        var config = child?.GameConfig;
                        
                        switch (flags)
                        {
                            case "cdn" or "cdns":
                                continue;
                            // Skip empty BGDL
                            case "bgdl":
                            {
                                var ver = Model.BgdLs.FirstOrDefault(x => x.Code == product);
                                if (ver?.Content?.Length <= 0)
                                {
                                    continue;
                                }
                                break;
                            }
                        }

                        config ??= new Core.Models.GameConfig
                        {
                            Config = new Core.Models.ConfigItems(true, string.Empty),
                            Code = product
                        };

                        <div class="game-item-link p-2 px-3">
                            <a class="d-flex" asp-page="/ViewGameManifest" asp-route-code="@(child == null ? product : child.Slug)" asp-route-file="@(string.IsNullOrEmpty(flags) ? "versions" : flags)" asp-route-latest-seqn="@seqn">
                                <div class="flex-fill">
                                    <h3 class="mt-0 mb-1">@(child?.Name ?? config.GetName())</h3>
                                    <ol class="breadcrumb p-0 m-0 bg-transparent">
                                        <li class="breadcrumb-item active">
                                            <i class="fa fa-@(config.Config.Encrypted ? "lock" : "lock-open")"></i>
                                        </li>
                                        <li class="breadcrumb-item active">
                                            @product
                                        </li>
                                        <li class="breadcrumb-item active">
                                            @flags
                                        </li>
                                        <li class="breadcrumb-item active">
                                            @if (flags == "versions")
                                            {
                                                var ver = Model.Versions.FirstOrDefault(x => x.Code == product);
                                                if (ver == null)
                                                {
                                                    @("N/A")
                                                }
                                                else if (product == "catalogs")
                                                {
                                                    @(ver.Content.Last().Versionsname)
                                                }
                                                else if (product == "bts")
                                                {
                                                    @("N/A")
                                                }
                                                else
                                                {
                                                    var verF = ver.Content.FirstOrDefault(x => x.Region == "us");
                                                    if (verF == null)
                                                    {
                                                        @("N/A")
                                                    }
                                                    else
                                                    {
                                                        @(verF.Versionsname)
                                                    }
                                                }
                                            }
                                            else if (flags == "bgdl")
                                            {
                                                var ver = Model.BgdLs.FirstOrDefault(x => x.Code == product);
                                                if (ver == null)
                                                {
                                                    @("N/A")
                                                }
                                                else if (product == "catalogs")
                                                {
                                                    @(ver.Content.Last().Versionsname)
                                                }
                                                else if (product == "bts")
                                                {
                                                    @("N/A")
                                                }
                                                else
                                                {
                                                    var verF = ver.Content.FirstOrDefault(x => x.Region == "us");
                                                    if (verF == null)
                                                    {
                                                        @("N/A")
                                                    }
                                                    else
                                                    {
                                                        @(verF.Versionsname)
                                                    }
                                                }
                                            }
                                        </li>
                                        <li class="breadcrumb-item active">
                                            <time>
                                                @Model.GameVersions.FirstOrDefault(x => x.Code == product && x.Type == flags)?.Updated.ToString("MMMM dd, yyyy hh:mm tt")
                                            </time>
                                        </li>
                                    </ol>
                                </div>
                                <div class="d-flex font-weight-bolder arrow">
                                    >
                                </div>
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
}
</div>